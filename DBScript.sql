DROP DATABASE IF EXISTS Shop;
CREATE DATABASE Shop;

USE Shop;

-- Create M_USERS table.
DROP TABLE IF EXISTS M_USERS;
CREATE TABLE M_USERS (
    USER_ID VARCHAR(36) NOT NULL,
	USER_FIRST_NAME VARCHAR(12) NOT NULL,
	USER_LAST_NAME VARCHAR(36) NOT NULL,
	USER_NAME VARCHAR(36) NOT NULL,
	USER_EMAIL VARCHAR(64) NOT NULL,
	USER_PASSWORD VARCHAR(64) NOT NULL,
	USER_PHONE_NUMBER VARCHAR(10) NOT NULL,
	USER_ADDRESS VARCHAR(64) NOT NULL,
	USER_DELETE_FLG INT NOT NULL,
	USER_VERIFY INT NOT NULL,
	USER_VERIFY_CODE  INT,
	USER_VERIFY_CODE_EXPIRATION BIGINT,
	USER_CREATED_BY VARCHAR(36) NOT NULL,
	USER_CREATED_AT BIGINT NOT NULL,
	USER_CREATED_AT_SYSTEM TIMESTAMP NOT NULL,
	USER_UPDATED_BY VARCHAR(36) NOT NULL,
	USER_UPDATED_AT BIGINT NOT NULL,
	USER_UPDATED_AT_SYSTEM VARCHAR(36) NOT NULL,

	-- Set PRIMARY KEY
	CONSTRAINT PK_M_USERS PRIMARY KEY (USER_ID),
	
	-- Set UNIQUE INDEX
	UNIQUE INDEX USER_ID_UNIQUE (USER_ID ASC) VISIBLE,
	UNIQUE INDEX USER_NAME_UNIQUE (USER_NAME ASC) VISIBLE,
	UNIQUE INDEX USER_EMAIL_UNIQUE (USER_EMAIL ASC) VISIBLE
);

-- Create M_ROLES table.
DROP TABLE IF EXISTS M_ROLES;
CREATE TABLE M_ROLES (
    ROLE_ID VARCHAR(36) NOT NULL,
	ROLE_NAME VARCHAR(16) NOT NULL,
	ROLE_DELETE_FLG INT NOT NULL,
	ROLE_CREATED_BY VARCHAR(36) NOT NULL,
	ROLE_CREATED_AT BIGINT NOT NULL,
	ROLE_CREATED_AT_SYSTEM TIMESTAMP NOT NULL,
	ROLE_UPDATED_BY VARCHAR(36) NOT NULL,
	ROLE_UPDATED_AT BIGINT NOT NULL,
	ROLE_UPDATED_AT_SYSTEM VARCHAR(36) NOT NULL,

	-- set PRIMARY KEY
	CONSTRAINT PK_M_ROLES PRIMARY KEY (ROLE_ID),
	
	-- set UNIQUE INDEX
	UNIQUE INDEX ROLE_ID_UNIQUE (ROLE_ID ASC) VISIBLE
);

-- Create R_USER_ROLES
DROP TABLE IF EXISTS R_USER_ROLES;
CREATE TABLE R_USER_ROLES (
	USER_ID VARCHAR(36) NOT NULL,
	ROLE_ID VARCHAR(36) NOT NULL,
	DELETE_FLG INT NOT NULL,
	ROLE_CREATED_BY VARCHAR(36) NOT NULL,
	ROLE_CREATED_AT BIGINT NOT NULL,
	ROLE_CREATED_AT_SYSTEM TIMESTAMP NOT NULL,
	ROLE_UPDATED_BY VARCHAR(36) NOT NULL,
	ROLE_UPDATED_AT BIGINT NOT NULL,
	ROLE_UPDATED_AT_SYSTEM VARCHAR(36) NOT NULL,
	
	-- Set PRIMARY KEY
	CONSTRAINT PK_R_USER_ROLES PRIMARY KEY (USER_ID, ROLE_ID),
	
	-- Set FOREIGN KEY
	CONSTRAINT FK_M_USERS_USER_ID FOREIGN KEY (USER_ID)
		REFERENCES M_USERS(USER_ID)
		ON DELETE CASCADE,

	CONSTRAINT FK_M_ROLES_ROLE_ID FOREIGN KEY (ROLE_ID)
		REFERENCES M_ROLES(ROLE_ID)
		ON DELETE CASCADE
);

-- Create UPDATE_USER_TRIGGER trigger
DROP TRIGGER IF EXISTS UPDATE_USER_TRIGGER;
CREATE TRIGGER UPDATE_USER_TRIGGER
AFTER UPDATE ON M_USERS
FOR EACH ROW
BEGIN
	-- If USER_DELETE_FLG is updated from 0 to 1
	IF OLD.USER_DELETE_FLG = 0 AND NEW.USER_DELETE_FLG = 1 THEN
		UPDATE R_USER_ROLES R_U_Rs
		INNER JOIN M_ROLES M_Rs ON R_U_Rs.ROLE_ID = M_Rs.ROLE_ID
		SET R_U_Rs.DELETE_FLG = 1
		WHERE R_U_Rs.USER_ID = NEW.USER_ID AND R_U_Rs.DELETE_FLG = 0;
	END IF;

	-- If USER_DELETE_FLG is updated from 1 to 0
	IF OLD.USER_DELETE_FLG = 1 AND NEW.USER_DELETE_FLG = 0 THEN
		UPDATE R_USER_ROLES R_U_Rs
		INNER JOIN M_ROLES M_Rs ON R_U_Rs.ROLE_ID = M_Rs.ROLE_ID
		SET R_U_Rs.DELETE_FLG = 0
		WHERE R_U_Rs.USER_ID = NEW.USER_ID AND M_Rs.ROLE_DELETE_FLG = 0;
    END IF;
END;

-- Create UPDATE_ROLE_TRIGGER trigger
DROP TRIGGER IF EXISTS UPDATE_ROLE_TRIGGER;
CREATE TRIGGER UPDATE_ROLE_TRIGGER
AFTER UPDATE ON M_ROLES
FOR EACH ROW
BEGIN
	-- If ROLE_DELETE_FLG is updated from 0 to 1
	IF OLD.ROLE_DELETE_FLG = 0 AND NEW.ROLE_DELETE_FLG = 1 THEN
	UPDATE R_USER_ROLES R_U_Rs
		INNER JOIN M_USERS M_Us ON R_U_Rs.USER_ID = M_Us.USER_ID
		SET R_U_Rs.DELETE_FLG = 1
		WHERE R_U_Rs.ROLE_ID = NEW.ROLE_ID AND R_U_Rs.DELETE_FLG = 0;
	END IF;

	-- If ROLE_DELETE_FLG is updated from 1 to 0
	IF OLD.ROLE_DELETE_FLG = 1 AND NEW.ROLE_DELETE_FLG = 0 THEN
		UPDATE R_USER_ROLES R_U_Rs
		INNER JOIN M_USERS M_Us ON R_U_Rs.USER_ID = M_Us.USER_ID
		SET R_U_Rs.DELETE_FLG = 0
		WHERE R_U_Rs.ROLE_ID = NEW.ROLE_ID AND R_U_Rs.DELETE_FLG = 1 AND M_Us.USER_DELETE_FLG = 0;
	END IF;
END;